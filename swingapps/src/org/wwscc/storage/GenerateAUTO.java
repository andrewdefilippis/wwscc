/*
 * This software is licensed under the GPLv3 license, included as
 * ./GPLv3-LICENSE.txt in the source distribution.
 *
 * Portions created by Brett Wilson are Copyright 2008 Brett Wilson.
 * All rights reserved.
 */

package org.wwscc.storage;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

/**
 *
 * @author bwilson
 */
public class GenerateAUTO
{
	PrintStream out;
	int indent;

	GenerateAUTO(PrintStream ps)
	{
		indent = 0;
		out = ps;
	}

	String dataGetter(Class<?> type, String var)
	{
		if (type == String.class)
			return String.format("rs.getString(\"%s\")", var);
		if (type == int.class)
			return String.format("rs.getInt(\"%s\")", var);
		if (type == long.class)
			return String.format("rs.getLong(\"%s\")", var);
		if (type == double.class)
			return String.format("rs.getDouble(\"%s\")", var);
		if (type == boolean.class)
			return String.format("rs.getBoolean(\"%s\")", var);
		if (type == byte[].class)
			return String.format("rs.getBlob(\"%s\")", var);
		if (type == SADateTime.class)
			return String.format("rs.getSADateTime(\"%s\")", var);
		if (type == SADateTime.SADate.class)
			return String.format("rs.getSADate(\"%s\")", var);
		if (type == SADateTime.SATime.class)
			return String.format("rs.getSATime(\"%s\")", var);
		return null;
	}

	void printf(String formatstr, Object ... args)
	{
		for (int ii = 0; ii < indent; ii++)
			out.print("\t");
		out.print(String.format(formatstr, args).toString());
		out.print("\n");
    }

	void printLoad(Class<?> type, Class<?> vartype)
	{
		String clazz = type.getCanonicalName();
		printf("public static %s load%s(ResultRow rs) throws IOException", clazz, type.getSimpleName());
		printf("{");
		indent++;
		printf("%s o = new %s();", clazz, clazz);
		for (Field f : vartype.getDeclaredFields())
		{
			if (Modifier.isStatic(f.getModifiers()) || !Modifier.isProtected(f.getModifiers()))
				continue;
			String n = f.getName();
			printf("o.%s = %s;", n, dataGetter(f.getType(), n));
		}
		printf("return o;");
		indent--;
		printf("}");
	}

	void printVarString(Class<?> type, Class<?> vartype)
	{
		StringBuilder s = new StringBuilder();
		printf("public static String get%sVarStr()", type.getSimpleName());
		printf("{");
		indent++;
		s.append("return \"");
		for (Field f : vartype.getDeclaredFields())
		{
			if (Modifier.isStatic(f.getModifiers()) || !Modifier.isProtected(f.getModifiers()))
				continue;
			if (f.getName().equals("id"))
				continue;
			s.append(f.getName()+",");
		}
		s.deleteCharAt(s.length()-1);
		s.append("\";");
		printf(s.toString());
		indent--;
		printf("}");
	}

	void printArgString(Class<?> type, Class<?> vartype)
	{
		StringBuilder s = new StringBuilder();
		printf("public static String get%sArgStr()", type.getSimpleName());
		printf("{");
		indent++;
		s.append("return \"");
		for (Field f : vartype.getDeclaredFields())
		{
			if (Modifier.isStatic(f.getModifiers()) || !Modifier.isProtected(f.getModifiers()))
				continue;
			if (f.getName().equals("id"))
				continue;
			s.append("?,");
		}
		s.deleteCharAt(s.length()-1);
		s.append("\";");
		printf(s.toString());
		indent--;
		printf("}");
	}

	
	void printSetString(Class<?> type, Class<?> vartype)
	{
		StringBuilder s = new StringBuilder();
		printf("public static String get%sSetStr()", type.getSimpleName());
		printf("{");
		indent++;
		s.append("return \"");
		for (Field f : vartype.getDeclaredFields())
		{
			if (Modifier.isStatic(f.getModifiers()) || !Modifier.isProtected(f.getModifiers()))
				continue;
			if (f.getName().equals("id"))
				continue;
			s.append(f.getName()+"=?,");
		}
		s.deleteCharAt(s.length()-1);
		s.append("\";");
		printf(s.toString());
		indent--;
		printf("}");
	}

	void printObjectList(Class<?> type, Class<?> vartype)
	{
		printf("public static void add%sValues(%s o, List<Object> l)", type.getSimpleName(), type.getCanonicalName());
		printf("{");
		indent++;
		for (Field f : vartype.getDeclaredFields())
		{
			if (Modifier.isStatic(f.getModifiers()) || !Modifier.isProtected(f.getModifiers()))
				continue;
			if (f.getName().equals("id"))
				continue;
			printf("l.add(o."+f.getName()+");");
		}
		indent--;
		printf("}");
	}

	void printFile(Class<?>[] list)
	{
		printf("package org.wwscc.storage;");
		printf("import java.io.IOException;");
		printf("import java.util.List;");
		printf("import org.wwscc.storage.SQLDataInterface.ResultRow;");
		printf("");
		printf("/*** AUTOGENERATED CODE, DO NOT MODIFY ***/");
		printf("");
		printf("public class AUTO");
		printf("{");
		indent++;
		for (Class<?> c : list)
		{
			Class<?> sc = c.getSuperclass();
			Class<?> varc;
			if ((sc != Object.class) && (sc != Comparable.class))
				varc = sc;
			else
				varc = c;

			printLoad(c, varc);
			printf("");
			printVarString(c, varc);
			printf("");
			printArgString(c, varc);
			printf("");
			printSetString(c, varc);
			printf("");
			printObjectList(c, varc);
			printf("");
		}
		indent--;
		printf("}");
	}

	public static void main(String args[]) throws IOException
	{
		FileOutputStream fout = new FileOutputStream("src/org/wwscc/storage/AUTO.java");
		GenerateAUTO cg = new GenerateAUTO(new PrintStream(fout));
		cg.printFile(new Class[] { Event.class, Driver.class, DriverField.class, Car.class, Run.class,
					Challenge.class, ChallengeRun.class,
					ClassData.Class.class, ClassData.Index.class,
					EventResult.class
		} );
		fout.close();
	}
}

