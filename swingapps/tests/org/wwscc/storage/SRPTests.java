package org.wwscc.storage;

import static org.junit.Assert.*;
import java.math.BigInteger;
import javax.security.sasl.AuthenticationException;
import org.junit.Test;

public class SRPTests {

	SRPAuthentication totest;
	String username = "ww2013:series";
	String password = "mypassword";
	// generated by srppeer.py
	BigInteger N = new BigInteger(1, Base64.decode("7q8Kua2zjdacM/gK+o/F6GByYYd1/zwLnqIxTJwlZXbWdN90luqB0zg7SBPWksbg4NXY4lC5i+SOSVwdYIna0V3H17RhVNa2zo70rWmxXUmCVZspe88YhcUp9WZmDlfsaO28PAVybMAv1Mv0l26qmv1ROP6DdkNbn8YdL8DrBuM="));
	BigInteger g = new BigInteger(1, Base64.decode("Ag=="));
	BigInteger k = new BigInteger(1, Base64.decode("/k5+VIdhcY7vPz63NFSRbdRwD4E="));
	BigInteger a = new BigInteger(1, Base64.decode("u31grVh63RZPaWLu3NP3qrcPsHOdHV476kitTc1h0yE="));
	BigInteger A = new BigInteger(1, Base64.decode("PHSLzyDWG3JikSZnqySESoPnhR0WckRCVNeESWGMXCMA98YYYrAIYOd6utRldOYRqzSoMp6EMLBJPtsPCXWKJMkCX5ot9/jCz+b/E/ZDc+/uoi2SVNuj1vpd5nYYI93Rl+1GZg/B3Gfyd4vchaWBF9VG/k8r2MROxyNjDmtT9bs="));
	BigInteger salt = new BigInteger(1, Base64.decode("vmyBVA=="));
	BigInteger B = new BigInteger(1, Base64.decode("JQGu3GrFB5xjDByhUde+th/rJsaxhs99W5Yc+uqhpqbEiX/FBujws0OC2xovZ+6yAuWPXwOm9dsBTz+E7cfIo5sJKlN02C+REitGqoOnjR+oLXpKWcpr9mJugsgbY+VM6pdu2TzIy+J5AQ5DqHO3p9/5BrkCZRL8KGRnqR1t6lg="));
	BigInteger M1 = new BigInteger(1, Base64.decode("nKMN8uxslnYyojJMaec/iXdvTxI="));
	BigInteger M2 = new BigInteger(1, Base64.decode("v5y/gw4ka75awNuS9/aMqDLp0UA="));
	BigInteger K = new BigInteger(1, Base64.decode("hbxNOZRru+Z2nnOl0rNxezhWTy4="));
		
	@Test
	public void testClient() throws AuthenticationException {
		totest = new SRPAuthentication("", username, password);
		assertEquals(SRPAuthentication.N, N);
		assertEquals(SRPAuthentication.g, g);
		assertEquals(SRPAuthentication.k, k);
		totest.start();
		totest.a = a;
		totest.A = A;  // set our random to what we want
		totest.server1(salt, B);
		assertEquals(totest.M1, M1);
		totest.server2(M2);
		assertEquals(totest.K, K);
	}

}
